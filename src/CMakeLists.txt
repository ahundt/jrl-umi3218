# SCH
SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/sch)
CONFIGURE_FILE(__init__.py ${CMAKE_CURRENT_BINARY_DIR}/sch/__init__.py COPYONLY)
SET(OUTPUT_BINDING ${CMAKE_CURRENT_BINARY_DIR}/sch.cpp)

# Generate Python bindings code
ADD_CUSTOM_COMMAND (
  OUTPUT ${OUTPUT_BINDING}
  COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/generate.py ${OUTPUT_BINDING}
  DEPENDS generate.py
)

# Build the library
SET(SOURCES ${OUTPUT_BINDING})

INCLUDE_DIRECTORIES(SYSTEM ${PYTHON_INCLUDE_PATH})
INCLUDE_DIRECTORIES(.)
INCLUDE_DIRECTORIES(${SCH_CORE_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${SPACEVECALG_INCLUDE_DIRS})

ADD_LIBRARY(_sch SHARED ${SOURCES})
PKG_CONFIG_USE_DEPENDENCY(_sch eigen3)
PKG_CONFIG_USE_DEPENDENCY(_sch SpaceVecAlg)
PKG_CONFIG_USE_DEPENDENCY(_sch sch-core)
TARGET_LINK_LIBRARIES(_sch sch-core)
# Requires C++11
SET_TARGET_PROPERTIES(_sch PROPERTIES PREFIX "" COMPILE_FLAGS "-std=c++0x")

# Install rules
INSTALL(TARGETS _sch DESTINATION "${PYTHON_SITELIB}/sch")
PYTHON_INSTALL_BUILD(sch __init__.py "${PYTHON_SITELIB}")
